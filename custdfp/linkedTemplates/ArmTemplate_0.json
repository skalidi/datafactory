{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "custdfp"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"CustBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CustBlobStorage'"
		},
		"customerlinkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'customerlinkedservice'"
		},
		"linkedsercust_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedsercust'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('CustBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerlinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('customerlinkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedsercust')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('linkedsercust_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archivest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "custid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cname",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer9"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "custid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cname",
						"type": "nvarchar"
					},
					{
						"name": "job",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_customerjobs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CustBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "custfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CustBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cust_deetails.csv",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cust_no",
						"type": "String"
					},
					{
						"name": "cust_name",
						"type": "String"
					},
					{
						"name": "cust_city",
						"type": "String"
					},
					{
						"name": "cust_state",
						"type": "String"
					},
					{
						"name": "cust_country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devwork"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Geeks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Geekname": {
										"type": "string"
									},
									"subject": {
										"type": "string"
									},
									"Articles": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.json",
						"container": "devwork"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"cust_no": {
							"type": "string"
						},
						"cust_name": {
							"type": "string"
						},
						"Address": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"City": {
										"type": "string"
									},
									"State": {
										"type": "string"
									},
									"Country": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "productdtails.csv",
						"folderPath": "inputs",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prodid",
						"type": "String"
					},
					{
						"name": "prodname",
						"type": "String"
					},
					{
						"name": "prodprice",
						"type": "String"
					},
					{
						"name": "prodcatid",
						"type": "String"
					},
					{
						"name": "cratedate",
						"type": "String"
					},
					{
						"name": "modifieddate",
						"type": "String"
					},
					{
						"name": "prodcatname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_prodcat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatname",
						"type": "varchar"
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_prodcat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkey",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "isactive",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgt_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/complexsqldb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_no as string,",
						"          cust_name as string,",
						"          Address as (City as string, State as string, Country as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(Address),",
						"     mapColumn(",
						"          cust_no,",
						"          cust_name,",
						"          City = Address.City,",
						"          State = Address.State,",
						"          Country = Address.Country",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 select(mapColumn(",
						"          cust_no,",
						"          cust_name,",
						"          City,",
						"          State,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          custid as integer,",
						"          cname as string,",
						"          city as string,",
						"          state as string,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          custid = cust_no,",
						"          cname = cust_name,",
						"          city = City,",
						"          state = State,",
						"          country = Country",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv2json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_no as string,",
						"          cust_name as string,",
						"          cust_city as string,",
						"          cust_state as string,",
						"          cust_country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Address = @(City=cust_city,",
						"          State=cust_state,",
						"          Country=cust_country)) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(cust_no,",
						"          cust_name),",
						"     Address = collect(Address)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Geeks as (Geekname as string, subject as string, Articles as integer)[]",
						"     ),",
						"     partitionFileNames:['Customer.json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		}
	]
}