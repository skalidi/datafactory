{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "custdfp"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"CustBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CustBlobStorage'"
		},
		"customerlinkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'customerlinkedservice'"
		},
		"linkedsercust_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedsercust'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('CustBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerlinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('customerlinkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedsercust')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('linkedsercust_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archivest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CustBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "custfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CustBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "productdtails.csv",
						"folderPath": "inputs",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prodid",
						"type": "String"
					},
					{
						"name": "prodname",
						"type": "String"
					},
					{
						"name": "prodprice",
						"type": "String"
					},
					{
						"name": "prodcatid",
						"type": "String"
					},
					{
						"name": "cratedate",
						"type": "String"
					},
					{
						"name": "modifieddate",
						"type": "String"
					},
					{
						"name": "prodcatname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_prodcat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatname",
						"type": "varchar"
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_prodcat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "cratedate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifieddate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedsercust",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkey",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodname",
						"type": "varchar"
					},
					{
						"name": "prodprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "prodcatid",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "isactive",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgt_product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedsercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cust_deetails.csv",
						"container": "devwork"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cust_no",
						"type": "String"
					},
					{
						"name": "cust_name",
						"type": "String"
					},
					{
						"name": "cust_city",
						"type": "String"
					},
					{
						"name": "cust_state",
						"type": "String"
					},
					{
						"name": "cust_country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerlinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devwork"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Geeks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Geekname": {
										"type": "string"
									},
									"subject": {
										"type": "string"
									},
									"Articles": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "srcproduct"
						},
						{
							"dataset": {
								"referenceName": "src_prodcat",
								"type": "DatasetReference"
							},
							"name": "srcprodcat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          prodid as integer,",
						"          prodname as string,",
						"          prodprice as integer,",
						"          prodcatid as integer,",
						"          cratedate as timestamp,",
						"          modifieddate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcproduct",
						"source(output(",
						"          prodcatid as integer,",
						"          prodcatname as string,",
						"          cratedate as timestamp,",
						"          modifieddate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcprodcat",
						"srcproduct, srcprodcat lookup(srcproduct@prodcatid == srcprodcat@prodcatid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['productdtails.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          prodid,",
						"          prodname,",
						"          prodprice,",
						"          prodcatid = srcproduct@prodcatid,",
						"          cratedate = srcproduct@cratedate,",
						"          modifieddate = srcproduct@modifieddate,",
						"          prodcatid = srcprodcat@prodcatid,",
						"          prodcatname,",
						"          cratedate = srcprodcat@cratedate,",
						"          modifieddate = srcprodcat@modifieddate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/src_prodcat')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Archivest",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          prodid as string,",
						"          prodname as string,",
						"          prodprice as string,",
						"          prodcatid as string,",
						"          cratedate as string,",
						"          modifieddate as string,",
						"          prodcatname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['/inputs','archiev'],",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 select(mapColumn(",
						"          prodid,",
						"          prodname,",
						"          prodprice,",
						"          prodcatid,",
						"          cratedate,",
						"          modifieddate,",
						"          prodcatname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string",
						"     ),",
						"     partitionFileNames:['prodcopy.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source')]",
				"[concat(variables('factoryId'), '/datasets/Archivest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "srcproduct"
						},
						{
							"dataset": {
								"referenceName": "tgt_product",
								"type": "DatasetReference"
							},
							"name": "tgtlkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_product",
								"type": "DatasetReference"
							},
							"name": "tgtproduct"
						},
						{
							"dataset": {
								"referenceName": "tgt_product",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          prodid as integer,",
						"          prodname as string,",
						"          prodprice as integer,",
						"          prodcatid as integer,",
						"          cratedate as timestamp,",
						"          modifieddate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcproduct",
						"source(output(",
						"          pkey as integer,",
						"          prodid as integer,",
						"          prodname as string,",
						"          prodprice as integer,",
						"          prodcatid as integer,",
						"          isactive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tgtlkp",
						"srcproduct derive(isactive = 1) ~> derivedColumn1",
						"tgtlkp select(mapColumn(",
						"          lkp_pkey = pkey,",
						"          lkp_prodid = prodid,",
						"          lkp_prodname = prodname,",
						"          lkp_prodprice = prodprice,",
						"          lkp_prodcatid = prodcatid,",
						"          lkp_isactive = isactive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"srcproduct, select1 lookup(prodid == lkp_prodid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(lkp_prodid)) ~> filter1",
						"filter1 select(mapColumn(",
						"          lkp_pkey,",
						"          lkp_prodid,",
						"          lkp_prodname,",
						"          lkp_prodprice,",
						"          lkp_prodcatid,",
						"          lkp_isactive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(lkp_isactive = 0) ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          pkey as integer,",
						"          prodid as integer,",
						"          prodname as string,",
						"          prodprice as integer,",
						"          prodcatid as integer,",
						"          isactive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          prodid,",
						"          prodname,",
						"          prodprice,",
						"          prodcatid,",
						"          isactive",
						"     )) ~> tgtproduct",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          pkey as integer,",
						"          prodid as integer,",
						"          prodname as string,",
						"          prodprice as integer,",
						"          prodcatid as integer,",
						"          isactive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['pkey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          pkey = lkp_pkey,",
						"          prodid = lkp_prodid,",
						"          prodname = lkp_prodname,",
						"          prodprice = lkp_prodprice,",
						"          prodcatid = lkp_prodcatid,",
						"          isactive = lkp_isactive",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/tgt_product')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv2json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_no as string,",
						"          cust_name as string,",
						"          cust_city as string,",
						"          cust_state as string,",
						"          cust_country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Address = @(City=cust_city,",
						"          State=cust_state,",
						"          Country=cust_country)) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(cust_no,",
						"          cust_name),",
						"     Address = collect(Address)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Geeks as (Geekname as string, subject as string, Articles as integer)[]",
						"     ),",
						"     partitionFileNames:['Customer.json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcproduct": {},
									"srcprodcat": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-03T15:01:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-03T15:31:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		}
	]
}